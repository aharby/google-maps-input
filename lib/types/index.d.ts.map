{"mappings":";AAGA,QAAQ,MAAM,CAAC;IACb,UAAU,MAAM;QACd,cAAc,EAAE,GAAG,CAAA;QACnB,+BAA+B,EAAE,GAAG,CAAA;KACrC;CACF;AGLD;IACE,GAAG,EAAE,MAAM,CAAA;IACX,GAAG,EAAE,MAAM,CAAA;CACZ;AAED;IACE,KAAK,EAAE,UAAU,CAAA;IACjB,IAAI,CAAC,EAAE,MAAM,CAAA;IACb,GAAG,EAAE,MAAM,CAAA;IACX,GAAG,EAAE,MAAM,CAAA;IACX,GAAG,CAAC,EAAE,MAAM,CAAA;CACb;AAED,mCAAoC,SAAQ,gBAAgB;IAC1D,aAAa,CAAC,EAAE,cAAc,WAAW,QAAQ,CAAC,CAAC,GAAG,qBAAqB,WAAW,QAAQ,CAAC,CAAC,CAAA;CACjG;AUWD,iCAAiC,iBAAiB,QAAQ,EAAE,kBAAkB,CAAC,GAAG;IAChF,SAAS,EAAE,qBAAqB,CAAA;CACjC,CAAA;AA6ID,6BAA4B;AInK5B,qCAAwB,UAAiB,UAAU,QAAQ,CAAC,CAAC,CAAA;AAE7D,OAAO,MAAM,mBAAmB,cAAc,UAAU,QAAQ,CAAC,CAQhE,CAAA;ACJD,qCAAwB,UAAiB,WAAW,QAAQ,CAAC,CAAC,CAAA;AAE9D,OAAO,MAAM,mBAAmB,cAAc,WAAW,QAAQ,CAAC,CAQjE,CAAA;ACZD;IACE,MAAM,EAAE,MAAM,CAAA;IACd,WAAW,CAAC,EAAE,MAAM,CAAA;IACpB,aAAa,CAAC,EAAE,MAAM,CAAA;IACtB,eAAe,CAAC,EAAE;QAChB,GAAG,EAAE,MAAM,CAAA;QACX,GAAG,EAAE,MAAM,CAAA;KACZ,CAAA;CACF;AAED,OAAO,MAAM,+DAgBX,CAAA","sources":["src/src/loader/loadGoogleMapsApi.ts","src/src/loader/LoadError.tsx","src/src/loader/GoogleMapsLoadProxy.tsx","src/src/types.ts","src/src/map/SearchInput.styles.tsx","src/src/map/SearchInput.tsx","src/src/map/util.ts","src/src/map/Map.styles.tsx","src/src/map/Map.tsx","src/src/map/Marker.tsx","src/src/input/GeopointSelect.tsx","src/src/input/GeopointInput.styles.tsx","src/src/global-workaround.ts","src/src/input/GeopointInput.tsx","src/src/map/Arrow.tsx","src/src/diff/GeopointMove.tsx","src/src/diff/GeopointFieldDiff.styles.tsx","src/src/diff/GeopointArrayDiff.tsx","src/src/diff/GeopointFieldDiff.tsx","src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import React from 'react'\r\nimport {createPlugin, SchemaType} from 'sanity'\r\nimport GeopointInput, {GeopointInputProps} from './input/GeopointInput'\r\nimport {setGeoConfig} from './global-workaround'\r\nimport {GeopointSchemaType} from './types'\r\n\r\nexport {GeopointArrayDiff, type DiffProps as GeopointArrayDiffProps} from './diff/GeopointArrayDiff'\r\nexport {GeopointFieldDiff, type DiffProps as GeopointFieldDiffProps} from './diff/GeopointFieldDiff'\r\n\r\nexport type {LatLng, GeopointSchemaType, Geopoint} from './types'\r\nexport {GeopointInput}\r\nexport type {GeopointInputProps}\r\n\r\nexport interface GoogleMapsInputConfig {\r\n  apiKey: string\r\n  defaultZoom?: number\r\n  defaultLocale?: string\r\n  defaultLocation?: {\r\n    lat: number\r\n    lng: number\r\n  }\r\n}\r\n\r\nexport const googleMapsInput = createPlugin<GoogleMapsInputConfig>((config) => {\r\n  setGeoConfig(config)\r\n  return {\r\n    name: 'google-maps-input',\r\n    form: {\r\n      components: {\r\n        input(props) {\r\n          if (isGeopoint(props.schemaType)) {\r\n            const castedProps = props as unknown as Omit<GeopointInputProps, 'geoConfig'>\r\n            return <GeopointInput {...castedProps} geoConfig={config} />\r\n          }\r\n          return props.renderDefault(props)\r\n        },\r\n      },\r\n    },\r\n  }\r\n})\r\n\r\nfunction isGeopoint(schemaType: SchemaType): schemaType is GeopointSchemaType {\r\n  return isType('geopoint', schemaType)\r\n}\r\n\r\nfunction isType(name: string, schema?: SchemaType): boolean {\r\n  if (schema?.name === name) {\r\n    return true\r\n    // eslint-disable-next-line no-negated-condition\r\n  } else if (!schema?.name) {\r\n    return false\r\n  }\r\n  return isType(name, schema?.type)\r\n}\r\n"],"names":[],"version":3,"file":"index.d.ts.map","sourceRoot":"../../"}